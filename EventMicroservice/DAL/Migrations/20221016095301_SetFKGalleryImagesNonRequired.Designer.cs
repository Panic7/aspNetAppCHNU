// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using EventMicroservice.DAL;

#nullable disable

namespace EventMicroservice.Migrations
{
    [DbContext(typeof(EventContext))]
    [Migration("20221016095301_SetFKGalleryImagesNonRequired")]
    partial class SetFKGalleryImagesNonRequired
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-rc.1.22426.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.HasKey("CategoryId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventCategory", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            EventId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            EventId = 2
                        },
                        new
                        {
                            CategoryId = 4,
                            EventId = 2
                        },
                        new
                        {
                            CategoryId = 5,
                            EventId = 2
                        },
                        new
                        {
                            CategoryId = 2,
                            EventId = 3
                        },
                        new
                        {
                            CategoryId = 2,
                            EventId = 4
                        },
                        new
                        {
                            CategoryId = 2,
                            EventId = 5
                        },
                        new
                        {
                            CategoryId = 3,
                            EventId = 6
                        },
                        new
                        {
                            CategoryId = 3,
                            EventId = 7
                        },
                        new
                        {
                            CategoryId = 4,
                            EventId = 8
                        },
                        new
                        {
                            CategoryId = 4,
                            EventId = 9
                        },
                        new
                        {
                            CategoryId = 4,
                            EventId = 10
                        },
                        new
                        {
                            CategoryId = 4,
                            EventId = 11
                        },
                        new
                        {
                            CategoryId = 4,
                            EventId = 12
                        },
                        new
                        {
                            CategoryId = 4,
                            EventId = 13
                        },
                        new
                        {
                            CategoryId = 5,
                            EventId = 14
                        },
                        new
                        {
                            CategoryId = 5,
                            EventId = 15
                        },
                        new
                        {
                            CategoryId = 5,
                            EventId = 16
                        },
                        new
                        {
                            CategoryId = 5,
                            EventId = 17
                        });
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventUser", (string)null);

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            UserId = 1
                        },
                        new
                        {
                            EventId = 1,
                            UserId = 2
                        },
                        new
                        {
                            EventId = 1,
                            UserId = 3
                        },
                        new
                        {
                            EventId = 1,
                            UserId = 4
                        },
                        new
                        {
                            EventId = 1,
                            UserId = 5
                        },
                        new
                        {
                            EventId = 2,
                            UserId = 1
                        },
                        new
                        {
                            EventId = 2,
                            UserId = 2
                        },
                        new
                        {
                            EventId = 2,
                            UserId = 3
                        },
                        new
                        {
                            EventId = 3,
                            UserId = 1
                        },
                        new
                        {
                            EventId = 4,
                            UserId = 1
                        },
                        new
                        {
                            EventId = 5,
                            UserId = 2
                        },
                        new
                        {
                            EventId = 6,
                            UserId = 3
                        },
                        new
                        {
                            EventId = 7,
                            UserId = 4
                        },
                        new
                        {
                            EventId = 8,
                            UserId = 5
                        },
                        new
                        {
                            EventId = 9,
                            UserId = 2
                        },
                        new
                        {
                            EventId = 10,
                            UserId = 3
                        },
                        new
                        {
                            EventId = 11,
                            UserId = 4
                        },
                        new
                        {
                            EventId = 12,
                            UserId = 5
                        },
                        new
                        {
                            EventId = 13,
                            UserId = 4
                        },
                        new
                        {
                            EventId = 13,
                            UserId = 5
                        },
                        new
                        {
                            EventId = 13,
                            UserId = 3
                        },
                        new
                        {
                            EventId = 14,
                            UserId = 5
                        },
                        new
                        {
                            EventId = 15,
                            UserId = 5
                        },
                        new
                        {
                            EventId = 16,
                            UserId = 5
                        },
                        new
                        {
                            EventId = 17,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("EventMicroservice.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Family"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Game industry"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stand up"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Nature"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Health"
                        });
                });

            modelBuilder.Entity("EventMicroservice.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 4,
                            Name = "Lodz"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 4,
                            Name = "Poznan"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 4,
                            Name = "Warszawa"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 4,
                            Name = "Lublin"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 4,
                            Name = "Krakow"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 5,
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 5,
                            Name = "Hannover"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 5,
                            Name = "Amsterdam"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 5,
                            Name = "Hamburg"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 5,
                            Name = "Shuttgart"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 3,
                            Name = "Roma"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 3,
                            Name = "Firenze"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 3,
                            Name = "Bologna"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 3,
                            Name = "Genova"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 3,
                            Name = "Milano"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 2,
                            Name = "Madrid"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 2,
                            Name = "Sevilla"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 2,
                            Name = "Valencia"
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 2,
                            Name = "Zaragoza"
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 2,
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = 21,
                            CountryId = 1,
                            Name = "Krimea"
                        },
                        new
                        {
                            Id = 22,
                            CountryId = 1,
                            Name = "Chernihiv"
                        },
                        new
                        {
                            Id = 23,
                            CountryId = 1,
                            Name = "Chornobaivka"
                        },
                        new
                        {
                            Id = 24,
                            CountryId = 1,
                            Name = "Chernivtsi"
                        },
                        new
                        {
                            Id = 25,
                            CountryId = 1,
                            Name = "Vinnytsia"
                        });
                });

            modelBuilder.Entity("EventMicroservice.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("EventMicroservice.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("PeopleCapacity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CityId = 24,
                            CountryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Domestic Violence",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CityId = 24,
                            CountryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Love is the basis of life",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            CityId = 23,
                            CountryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Global Gaming Expo 2022",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            CityId = 23,
                            CountryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sweden Game Conference 2022",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            CityId = 22,
                            CountryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SBC Summit CIS 2022",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 2,
                            CityId = 16,
                            CountryId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "International Stand Up Comedy",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 2,
                            CityId = 16,
                            CountryId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cancel Culture Comedy",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 3,
                            CityId = 16,
                            CountryId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Failing in Love",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 3,
                            CityId = 15,
                            CountryId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Earth Day 2022",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 3,
                            CityId = 15,
                            CountryId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sounds at Sunset Concert Series",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 3,
                            CityId = 15,
                            CountryId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Playscape Mondays",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 3,
                            CityId = 15,
                            CountryId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Folk & Roots",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 3,
                            CityId = 15,
                            CountryId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Annual Migration Festival",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 3,
                            CityId = 2,
                            CountryId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chronic Disease and Self-Help Program Lay Leader Training",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 3,
                            CityId = 10,
                            CountryId = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AI & Medical Imaging",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 16,
                            AuthorId = 3,
                            CityId = 10,
                            CountryId = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Duitslanddag",
                            PeopleCapacity = 0
                        },
                        new
                        {
                            Id = 17,
                            AuthorId = 4,
                            CityId = 6,
                            CountryId = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Emerging Technologies in Health",
                            PeopleCapacity = 0
                        });
                });

            modelBuilder.Entity("EventMicroservice.Models.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Galleries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            Name = "gallery1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            EventId = 2,
                            Name = "gallery2",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            EventId = 3,
                            Name = "gallery3",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            EventId = 4,
                            Name = "gallery4",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            EventId = 5,
                            Name = "gallery5",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            EventId = 6,
                            Name = "gallery6",
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            EventId = 7,
                            Name = "gallery7",
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            EventId = 8,
                            Name = "gallery8",
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            EventId = 9,
                            Name = "gallery9",
                            UserId = 3
                        },
                        new
                        {
                            Id = 10,
                            EventId = 10,
                            Name = "gallery10",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("EventMicroservice.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GalleryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GalleryId = 1,
                            Name = "https://i.pinimg.com/originals/9b/e8/2e/9be82e85e85622adb810430a9a7aa9fe.jpg",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            GalleryId = 1,
                            Name = "https://i.pinimg.com/originals/ab/c7/c5/abc7c5db1d161b0f5fbf6188e5ad47d1.jpg",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            GalleryId = 1,
                            Name = "https://i.pinimg.com/564x/a8/7e/28/a87e28a37a1d992bc9e8f0ffeed70710.jpg",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            GalleryId = 1,
                            Name = "https://i.pinimg.com/originals/cf/d8/f9/cfd8f9ba699d12fb9fbef34e6a941170.jpg",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            GalleryId = 1,
                            Name = "https://i.pinimg.com/564x/42/70/b9/4270b97ec5499a420ff280beae4acd30.jpg",
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            GalleryId = 2,
                            Name = "https://i.pinimg.com/originals/2b/ae/f6/2baef6acf1db6d5f95ae43e9aa6ce4a3.jpg",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            GalleryId = 2,
                            Name = "https://img.thesitebase.net/10224/10224026/products/0x900@16509464296105fa6630.jpeg",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            GalleryId = 2,
                            Name = "http://www.lemky.com/uploads/posts/2009-06/1245182997_8.jpg",
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            GalleryId = 1,
                            Name = "https://i.pinimg.com/564x/dc/10/8e/dc108e35b06672104ac2e9b0996b8241.jpg",
                            UserId = 3
                        },
                        new
                        {
                            Id = 10,
                            GalleryId = 3,
                            Name = "https://i.pinimg.com/originals/7c/a8/59/7ca85929f1c6a7a56b9ae3633967260c.jpg",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("EventMicroservice.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MODERATOR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "USER"
                        });
                });

            modelBuilder.Entity("EventMicroservice.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 24,
                            CountryId = 1,
                            Email = "qwer@gmail.com",
                            FirstName = "Esmaralda",
                            Password = "qwert",
                            Phone = "+380991231212",
                            RoleId = 1,
                            SecondName = "Voigt"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 24,
                            CountryId = 1,
                            Email = "qwerr@gmail.com",
                            FirstName = "Ostap",
                            Password = "qwert",
                            Phone = "+380991231212",
                            RoleId = 2,
                            SecondName = "Bleier"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 24,
                            CountryId = 1,
                            Email = "qwerrr@gmail.com",
                            FirstName = "Sophia",
                            Password = "qwert",
                            Phone = "+380991231212",
                            RoleId = 2,
                            SecondName = "Beringer"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 23,
                            CountryId = 1,
                            Email = "qwerrrr@gmail.com",
                            FirstName = "Marlyn",
                            Password = "qwert",
                            Phone = "+380991231212",
                            RoleId = 3,
                            SecondName = "Hendry"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 16,
                            CountryId = 2,
                            Email = "qwerq@gmail.com",
                            FirstName = "Vlasi",
                            Password = "qwert",
                            Phone = "+380991231212",
                            RoleId = 3,
                            SecondName = "Arterberry"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 15,
                            CountryId = 3,
                            Email = "qwerqq@gmail.com",
                            FirstName = "Chasity",
                            Password = "qwert",
                            Phone = "+380991231212",
                            RoleId = 3,
                            SecondName = "Ilbert"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 15,
                            CountryId = 3,
                            Email = "qwerqqq@gmail.com",
                            FirstName = "Seraphina",
                            Password = "qwert",
                            Phone = "+380991231212",
                            RoleId = 3,
                            SecondName = "Salmon"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 2,
                            CountryId = 4,
                            Email = "qwerw@gmail.com",
                            FirstName = "Chas",
                            Password = "qwert",
                            Phone = "+380991231212",
                            RoleId = 3,
                            SecondName = "Hope"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 6,
                            CountryId = 5,
                            Email = "qwerww@gmail.com",
                            FirstName = "Nadezhda",
                            Password = "qwert",
                            Phone = "+380991231212",
                            RoleId = 3,
                            SecondName = "Haynes"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 10,
                            CountryId = 5,
                            Email = "qwerwww@gmail.com",
                            FirstName = "Sonny",
                            Password = "qwert",
                            Phone = "+380991231212",
                            RoleId = 3,
                            SecondName = "Gibb"
                        },
                        new
                        {
                            Id = 11,
                            CityId = 8,
                            CountryId = 5,
                            Email = "qwere@gmail.com",
                            FirstName = "Eric",
                            Password = "qwert",
                            Phone = "+380991231212",
                            RoleId = 3,
                            SecondName = "Lincoln"
                        });
                });

            modelBuilder.Entity("EventCategory", b =>
                {
                    b.HasOne("EventMicroservice.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventMicroservice.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.HasOne("EventMicroservice.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventMicroservice.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventMicroservice.Models.City", b =>
                {
                    b.HasOne("EventMicroservice.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("EventMicroservice.Models.Event", b =>
                {
                    b.HasOne("EventMicroservice.Models.User", "Author")
                        .WithMany("CreatedEvents")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventMicroservice.Models.City", "City")
                        .WithMany("Events")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventMicroservice.Models.Country", "Country")
                        .WithMany("Events")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("EventMicroservice.Models.Gallery", b =>
                {
                    b.HasOne("EventMicroservice.Models.Event", "Event")
                        .WithOne("Gallery")
                        .HasForeignKey("EventMicroservice.Models.Gallery", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventMicroservice.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventMicroservice.Models.Image", b =>
                {
                    b.HasOne("EventMicroservice.Models.Gallery", "Gallery")
                        .WithMany("Images")
                        .HasForeignKey("GalleryId");

                    b.HasOne("EventMicroservice.Models.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventMicroservice.Models.User", b =>
                {
                    b.HasOne("EventMicroservice.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventMicroservice.Models.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventMicroservice.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EventMicroservice.Models.City", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventMicroservice.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Events");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventMicroservice.Models.Event", b =>
                {
                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("EventMicroservice.Models.Gallery", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("EventMicroservice.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventMicroservice.Models.User", b =>
                {
                    b.Navigation("CreatedEvents");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
